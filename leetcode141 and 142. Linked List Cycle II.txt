# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        fast = head 
        slow = head
        restart = head
        meet = None
        while fast:
            slow = slow.next
            fast = fast.next
            if fast is None:
                return None
            fast = fast.next
            if fast == slow:
                meet = fast
                break
        if meet is None:
            return None
        else:
            while meet != restart:
                meet = meet.next
                restart = restart.next
            return restart
            