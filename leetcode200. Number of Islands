from collections import deque
class Solution:
    def BFS(self, mark, grid, x, y):
        ##方向数组
        dx = [1, -1, 0, 0]
        dy = [0, 0, -1, 1]
        q = deque([(x, y)])
        mark[x][y] = 1
        while q:
            kx, ky = q.popleft()
            for i in range(4):
                newx = kx + dx[i]
                newy = ky + dy[i]
                if newx < 0 or newx > len(mark)-1 or newy < 0 or newy > len(mark[0])-1:
                    continue
                if mark[newx][newy] == 0 and grid[newx][newy] == '1':
                    q.append((newx, newy))
                    mark[newx][newy] = 1
    def DFS(self, mark, grid, x, y):
        ##方向数组
        mark[x][y] = 1 
        dx = [1, -1, 0, 0]
        dy = [0, 0, -1, 1]
        for i in range(4):
            newx = x + dx[i]
            newy = y + dy[i]
            if newx < 0 or newx > len(mark)-1 or newy < 0 or newy > len(mark[0])-1:
                continue
            if mark[newx][newy] == 0 and grid[newx][newy] == '1':
                self.DFS(mark, grid, newx, newy)
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        island_num = 0
        mark = [[0 for col in range(len(grid[0]))]for row in range(len(grid))]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if mark[i][j] == 0 and grid[i][j] == '1':
                    self.DFS(mark, grid, i, j)
                    #self.BFS(mark, grid, i, j)
                    island_num += 1
        return island_num
                    