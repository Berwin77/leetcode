# -*- coding:utf-8 -*-
####有序矩阵中第K小的元素  leetcode378
#### 循环 就是二分查找的高阶版本 自己举个例子即可验证
class Solution:
    def search(self, nums, k):
        left = nums[0][0]
        right = nums[len(nums)-1][len(nums[0])-1]
        while (left <= right):
            mid = (left+right)//2
            count = self.tocount(nums, mid)
            if count >= k:
                right = mid -1 
            if count < k:
                left = mid + 1
        return mid
        
    def tocount(self, nums, mid):
        count = 0
        i = len(nums)-1
        j = 0
        while i >=0 and j<len(nums[0]):
            if nums[i][j] <= mid:
                count += i+1
                j += 1
            else:
                i -= 1
        return count
                
        
        
        
a = Solution()
print(a.search([[1,3,5,7],[2,4,6,8]], 3))