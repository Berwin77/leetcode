class TrieNode:
    def __init__(self):
        self.children = {}
        self.isEnd = False
class WordDictionary:

    def __init__(self):
        self.root = TrieNode()
        

    def addWord(self, word):
        node = self.root
        for char in word:
            node = node.children.setdefault(char, TrieNode())
        node.isEnd = True

    def search(self, word):
        return self.find(self.root, word)
    def find(self, node, word):
        if word == '':
            return node.isEnd
        if word[0] == '.':
            for x in node.children:
                print('x=', x, 'node.children.get(x)=', node.children.get(x).children)
                if self.find(node.children.get(x), word[1:]):
                    return True
        else:
            node = node.children.get(word[0])
            print('node=', node)
            if node == None:
                return False
            return self.find(node, word[1:])
        return False
                        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)