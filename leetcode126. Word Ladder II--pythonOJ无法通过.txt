from collections import deque
class Solution:
    def d_same(self, word1, word2):
        n = 0
        for i in range(len(word1)):
            if word1[i] == word2[i]:
                n += 1
        if n + 1 == len(word1):
            return True
        else:
            return False
    def to_dict(self, wordList):
        d = {}
        for i in wordList:
            for j in wordList:
                if self.d_same(i, j):
                    if i not in d:
                        d[i] = [j]
                    else:
                        d[i].append(j)
        return d
    def BFS(self, beginWord, endWord, wordList):
        if beginWord not in wordList:
            wordList.append(beginWord)
        d = self.to_dict(wordList)
        #print(d)
        if beginWord not in d:
            return []
        q = deque([[beginWord, -1, 1]])  ##单词， 前驱节点， 走的步数
        end_stack = []
        MIN_STEP = 0
        visit = {}
        visit[beginWord] = 1  
        front = 0
        while front != len(q):
            word , count, i = q[front]
            if MIN_STEP != 0 and i > MIN_STEP: ##i>MIN_STEP时， 代表所有到达终点的路径所搜完成了
                break
            if word == endWord:
                MIN_STEP = i
                end_stack.append([count, i])
            for w in d[word]:
                if w not in visit or visit[w] == i + 1:##如果w不在visit 或者 visit[w] == i+1 代表着 去的这条路径就是找到一条路径之后的那条                                                        ##路径
                    q.append([w, front, i+1])
                    visit[w] = i + 1
            front += 1
        
        #print('----------------', end_stack)
        ###找到了所有路径，往回遍历
        res = [[endWord] for row in range(len(end_stack))]
        for i in range(len(end_stack)):
            a = end_stack[i][0]
            while a >= 0:
                res[i].append(q[a][0])
                a = q[a][1]
            res[i].reverse()
        return res
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        return self.BFS(beginWord, endWord, wordList)
    
        
            
                    
            
            
        