# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

'''
解法
当root的值位于L和R之间，则递归修剪其左右子树，返回root。
当root的值小于L，则其左子树的值都小于L，抛弃左子树，返回修剪过的右子树。
当root的值大于R，则其右子树的值都大于R，抛弃右子树，返回修剪过的左子树。
'''
class Solution:
    def searchBST(self, node, L, R):
        if node.val < L or node.val > R:
            if node.val < L:
                if node.right:
                    return self.searchBST(node.right, L, R)
            if node.val > R:
                if node.left:
                    return self.searchBST(node.left, L, R)
            return None
        elif node.val <= R and node.val >= L:
            if node.left:
                node.left = self.searchBST(node.left, L, R)
            if node.right:
                node.right = self.searchBST(node.right, L, R)
            return node
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        return self.searchBST(root, L, R)
        