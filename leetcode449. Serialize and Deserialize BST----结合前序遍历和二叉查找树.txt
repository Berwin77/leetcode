# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:
    def preorder(self ,node):
        if node is None:
            return 
        self.s.append(node.val)
        self.preorder(node.left)
        self.preorder(node.right)
    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return None
        self.s = []
        self.preorder(root)
        res = [str(v) for v in self.s]
        ss = '#'.join(res)
        return ss
    
    def BST_insert(self, node, newnode):
        if node.val > newnode.val:
            if node.left:
                self.BST_insert(node.left, newnode)
            else:
                node.left = newnode
        else:
            if node.right:
                self.BST_insert(node.right, newnode)
            else:
                node.right = newnode 
            
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return []
        print(data)
        ss = data.split('#')
        s = [int(v) for v in ss]
        print(s)
        root = TreeNode(s[0])
        for i in range(1, len(s)):
            self.BST_insert(root, TreeNode(s[i]))
        return root

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))